/**
 *
 *  Endurance.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Endurance.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::cpp_gymdb;

const std::string Endurance::Cols::_id = "\"id\"";
const std::string Endurance::Cols::_exercise = "\"exercise\"";
const std::string Endurance::Cols::_reps = "\"reps\"";
const std::string Endurance::Cols::_superset = "\"superset\"";
const std::string Endurance::Cols::_work_id = "\"work_id\"";
const std::string Endurance::Cols::_week_id = "\"week_id\"";
const std::string Endurance::primaryKeyName = "";
const bool Endurance::hasPrimaryKey = false;
const std::string Endurance::tableName = "\"endurance\"";

const std::vector<typename Endurance::MetaData> Endurance::metaData_={
{"id","int32_t","integer",4,1,0,1},
{"exercise","std::string","text",0,0,0,0},
{"reps","std::string","character varying",32,0,0,0},
{"superset","int32_t","integer",4,0,0,0},
{"work_id","int32_t","integer",4,0,0,1},
{"week_id","int32_t","integer",4,0,0,1}
};
const std::string &Endurance::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Endurance::Endurance(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["exercise"].isNull())
        {
            exercise_=std::make_shared<std::string>(r["exercise"].as<std::string>());
        }
        if(!r["reps"].isNull())
        {
            reps_=std::make_shared<std::string>(r["reps"].as<std::string>());
        }
        if(!r["superset"].isNull())
        {
            superset_=std::make_shared<int32_t>(r["superset"].as<int32_t>());
        }
        if(!r["work_id"].isNull())
        {
            workId_=std::make_shared<int32_t>(r["work_id"].as<int32_t>());
        }
        if(!r["week_id"].isNull())
        {
            weekId_=std::make_shared<int32_t>(r["week_id"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 6 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            exercise_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            reps_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            superset_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            workId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            weekId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

Endurance::Endurance(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            exercise_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            reps_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            superset_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            workId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            weekId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
}

Endurance::Endurance(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("exercise"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["exercise"].isNull())
        {
            exercise_=std::make_shared<std::string>(pJson["exercise"].asString());
        }
    }
    if(pJson.isMember("reps"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["reps"].isNull())
        {
            reps_=std::make_shared<std::string>(pJson["reps"].asString());
        }
    }
    if(pJson.isMember("superset"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["superset"].isNull())
        {
            superset_=std::make_shared<int32_t>((int32_t)pJson["superset"].asInt64());
        }
    }
    if(pJson.isMember("work_id"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["work_id"].isNull())
        {
            workId_=std::make_shared<int32_t>((int32_t)pJson["work_id"].asInt64());
        }
    }
    if(pJson.isMember("week_id"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["week_id"].isNull())
        {
            weekId_=std::make_shared<int32_t>((int32_t)pJson["week_id"].asInt64());
        }
    }
}

void Endurance::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            exercise_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            reps_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            superset_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            workId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            weekId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[5]].asInt64());
        }
    }
}

void Endurance::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("exercise"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["exercise"].isNull())
        {
            exercise_=std::make_shared<std::string>(pJson["exercise"].asString());
        }
    }
    if(pJson.isMember("reps"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["reps"].isNull())
        {
            reps_=std::make_shared<std::string>(pJson["reps"].asString());
        }
    }
    if(pJson.isMember("superset"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["superset"].isNull())
        {
            superset_=std::make_shared<int32_t>((int32_t)pJson["superset"].asInt64());
        }
    }
    if(pJson.isMember("work_id"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["work_id"].isNull())
        {
            workId_=std::make_shared<int32_t>((int32_t)pJson["work_id"].asInt64());
        }
    }
    if(pJson.isMember("week_id"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["week_id"].isNull())
        {
            weekId_=std::make_shared<int32_t>((int32_t)pJson["week_id"].asInt64());
        }
    }
}

const int32_t &Endurance::getValueOfId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Endurance::getId() const noexcept
{
    return id_;
}
void Endurance::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}

const std::string &Endurance::getValueOfExercise() const noexcept
{
    static const std::string defaultValue = std::string();
    if(exercise_)
        return *exercise_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Endurance::getExercise() const noexcept
{
    return exercise_;
}
void Endurance::setExercise(const std::string &pExercise) noexcept
{
    exercise_ = std::make_shared<std::string>(pExercise);
    dirtyFlag_[1] = true;
}
void Endurance::setExercise(std::string &&pExercise) noexcept
{
    exercise_ = std::make_shared<std::string>(std::move(pExercise));
    dirtyFlag_[1] = true;
}
void Endurance::setExerciseToNull() noexcept
{
    exercise_.reset();
    dirtyFlag_[1] = true;
}

const std::string &Endurance::getValueOfReps() const noexcept
{
    static const std::string defaultValue = std::string();
    if(reps_)
        return *reps_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Endurance::getReps() const noexcept
{
    return reps_;
}
void Endurance::setReps(const std::string &pReps) noexcept
{
    reps_ = std::make_shared<std::string>(pReps);
    dirtyFlag_[2] = true;
}
void Endurance::setReps(std::string &&pReps) noexcept
{
    reps_ = std::make_shared<std::string>(std::move(pReps));
    dirtyFlag_[2] = true;
}
void Endurance::setRepsToNull() noexcept
{
    reps_.reset();
    dirtyFlag_[2] = true;
}

const int32_t &Endurance::getValueOfSuperset() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(superset_)
        return *superset_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Endurance::getSuperset() const noexcept
{
    return superset_;
}
void Endurance::setSuperset(const int32_t &pSuperset) noexcept
{
    superset_ = std::make_shared<int32_t>(pSuperset);
    dirtyFlag_[3] = true;
}
void Endurance::setSupersetToNull() noexcept
{
    superset_.reset();
    dirtyFlag_[3] = true;
}

const int32_t &Endurance::getValueOfWorkId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(workId_)
        return *workId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Endurance::getWorkId() const noexcept
{
    return workId_;
}
void Endurance::setWorkId(const int32_t &pWorkId) noexcept
{
    workId_ = std::make_shared<int32_t>(pWorkId);
    dirtyFlag_[4] = true;
}

const int32_t &Endurance::getValueOfWeekId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(weekId_)
        return *weekId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Endurance::getWeekId() const noexcept
{
    return weekId_;
}
void Endurance::setWeekId(const int32_t &pWeekId) noexcept
{
    weekId_ = std::make_shared<int32_t>(pWeekId);
    dirtyFlag_[5] = true;
}

void Endurance::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Endurance::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "exercise",
        "reps",
        "superset",
        "work_id",
        "week_id"
    };
    return inCols;
}

void Endurance::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getExercise())
        {
            binder << getValueOfExercise();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getReps())
        {
            binder << getValueOfReps();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getSuperset())
        {
            binder << getValueOfSuperset();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getWorkId())
        {
            binder << getValueOfWorkId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getWeekId())
        {
            binder << getValueOfWeekId();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Endurance::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    return ret;
}

void Endurance::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getExercise())
        {
            binder << getValueOfExercise();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getReps())
        {
            binder << getValueOfReps();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getSuperset())
        {
            binder << getValueOfSuperset();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getWorkId())
        {
            binder << getValueOfWorkId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getWeekId())
        {
            binder << getValueOfWeekId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Endurance::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getExercise())
    {
        ret["exercise"]=getValueOfExercise();
    }
    else
    {
        ret["exercise"]=Json::Value();
    }
    if(getReps())
    {
        ret["reps"]=getValueOfReps();
    }
    else
    {
        ret["reps"]=Json::Value();
    }
    if(getSuperset())
    {
        ret["superset"]=getValueOfSuperset();
    }
    else
    {
        ret["superset"]=Json::Value();
    }
    if(getWorkId())
    {
        ret["work_id"]=getValueOfWorkId();
    }
    else
    {
        ret["work_id"]=Json::Value();
    }
    if(getWeekId())
    {
        ret["week_id"]=getValueOfWeekId();
    }
    else
    {
        ret["week_id"]=Json::Value();
    }
    return ret;
}

std::string Endurance::toString() const
{
    return toJson().toStyledString();
}

Json::Value Endurance::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 6)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getExercise())
            {
                ret[pMasqueradingVector[1]]=getValueOfExercise();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getReps())
            {
                ret[pMasqueradingVector[2]]=getValueOfReps();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getSuperset())
            {
                ret[pMasqueradingVector[3]]=getValueOfSuperset();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getWorkId())
            {
                ret[pMasqueradingVector[4]]=getValueOfWorkId();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getWeekId())
            {
                ret[pMasqueradingVector[5]]=getValueOfWeekId();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getExercise())
    {
        ret["exercise"]=getValueOfExercise();
    }
    else
    {
        ret["exercise"]=Json::Value();
    }
    if(getReps())
    {
        ret["reps"]=getValueOfReps();
    }
    else
    {
        ret["reps"]=Json::Value();
    }
    if(getSuperset())
    {
        ret["superset"]=getValueOfSuperset();
    }
    else
    {
        ret["superset"]=Json::Value();
    }
    if(getWorkId())
    {
        ret["work_id"]=getValueOfWorkId();
    }
    else
    {
        ret["work_id"]=Json::Value();
    }
    if(getWeekId())
    {
        ret["week_id"]=getValueOfWeekId();
    }
    else
    {
        ret["week_id"]=Json::Value();
    }
    return ret;
}

bool Endurance::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("exercise"))
    {
        if(!validJsonOfField(1, "exercise", pJson["exercise"], err, true))
            return false;
    }
    if(pJson.isMember("reps"))
    {
        if(!validJsonOfField(2, "reps", pJson["reps"], err, true))
            return false;
    }
    if(pJson.isMember("superset"))
    {
        if(!validJsonOfField(3, "superset", pJson["superset"], err, true))
            return false;
    }
    if(pJson.isMember("work_id"))
    {
        if(!validJsonOfField(4, "work_id", pJson["work_id"], err, true))
            return false;
    }
    else
    {
        err="The work_id column cannot be null";
        return false;
    }
    if(pJson.isMember("week_id"))
    {
        if(!validJsonOfField(5, "week_id", pJson["week_id"], err, true))
            return false;
    }
    else
    {
        err="The week_id column cannot be null";
        return false;
    }
    return true;
}
bool Endurance::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                   const std::vector<std::string> &pMasqueradingVector,
                                                   std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Endurance::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    if(pJson.isMember("exercise"))
    {
        if(!validJsonOfField(1, "exercise", pJson["exercise"], err, false))
            return false;
    }
    if(pJson.isMember("reps"))
    {
        if(!validJsonOfField(2, "reps", pJson["reps"], err, false))
            return false;
    }
    if(pJson.isMember("superset"))
    {
        if(!validJsonOfField(3, "superset", pJson["superset"], err, false))
            return false;
    }
    if(pJson.isMember("work_id"))
    {
        if(!validJsonOfField(4, "work_id", pJson["work_id"], err, false))
            return false;
    }
    if(pJson.isMember("week_id"))
    {
        if(!validJsonOfField(5, "week_id", pJson["week_id"], err, false))
            return false;
    }
    return true;
}
bool Endurance::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Endurance::validJsonOfField(size_t index,
                                 const std::string &fieldName,
                                 const Json::Value &pJson,
                                 std::string &err,
                                 bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            else
            {
                err="The automatic primary key cannot be update";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 32)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 32)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
