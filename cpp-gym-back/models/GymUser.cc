/**
 *
 *  GymUser.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "GymUser.h"
#include "UserExercise.h"
#include "Workout.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::cpp_gymdb;

const std::string GymUser::Cols::_id = "\"id\"";
const std::string GymUser::Cols::_email = "\"email\"";
const std::string GymUser::Cols::_hashed_password = "\"hashed_password\"";
const std::string GymUser::primaryKeyName = "";
const bool GymUser::hasPrimaryKey = false;
const std::string GymUser::tableName = "\"gym_user\"";

const std::vector<typename GymUser::MetaData> GymUser::metaData_={
{"id","int32_t","integer",4,1,0,1},
{"email","std::string","character varying",128,0,0,1},
{"hashed_password","std::string","text",0,0,0,1}
};
const std::string &GymUser::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
GymUser::GymUser(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["email"].isNull())
        {
            email_=std::make_shared<std::string>(r["email"].as<std::string>());
        }
        if(!r["hashed_password"].isNull())
        {
            hashedPassword_=std::make_shared<std::string>(r["hashed_password"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 3 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            email_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            hashedPassword_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

GymUser::GymUser(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            email_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            hashedPassword_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
}

GymUser::GymUser(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("email"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["email"].isNull())
        {
            email_=std::make_shared<std::string>(pJson["email"].asString());
        }
    }
    if(pJson.isMember("hashed_password"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["hashed_password"].isNull())
        {
            hashedPassword_=std::make_shared<std::string>(pJson["hashed_password"].asString());
        }
    }
}

void GymUser::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            email_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            hashedPassword_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
}

void GymUser::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("email"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["email"].isNull())
        {
            email_=std::make_shared<std::string>(pJson["email"].asString());
        }
    }
    if(pJson.isMember("hashed_password"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["hashed_password"].isNull())
        {
            hashedPassword_=std::make_shared<std::string>(pJson["hashed_password"].asString());
        }
    }
}

const int32_t &GymUser::getValueOfId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &GymUser::getId() const noexcept
{
    return id_;
}
void GymUser::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}

const std::string &GymUser::getValueOfEmail() const noexcept
{
    static const std::string defaultValue = std::string();
    if(email_)
        return *email_;
    return defaultValue;
}
const std::shared_ptr<std::string> &GymUser::getEmail() const noexcept
{
    return email_;
}
void GymUser::setEmail(const std::string &pEmail) noexcept
{
    email_ = std::make_shared<std::string>(pEmail);
    dirtyFlag_[1] = true;
}
void GymUser::setEmail(std::string &&pEmail) noexcept
{
    email_ = std::make_shared<std::string>(std::move(pEmail));
    dirtyFlag_[1] = true;
}

const std::string &GymUser::getValueOfHashedPassword() const noexcept
{
    static const std::string defaultValue = std::string();
    if(hashedPassword_)
        return *hashedPassword_;
    return defaultValue;
}
const std::shared_ptr<std::string> &GymUser::getHashedPassword() const noexcept
{
    return hashedPassword_;
}
void GymUser::setHashedPassword(const std::string &pHashedPassword) noexcept
{
    hashedPassword_ = std::make_shared<std::string>(pHashedPassword);
    dirtyFlag_[2] = true;
}
void GymUser::setHashedPassword(std::string &&pHashedPassword) noexcept
{
    hashedPassword_ = std::make_shared<std::string>(std::move(pHashedPassword));
    dirtyFlag_[2] = true;
}

void GymUser::updateId(const uint64_t id)
{
}

const std::vector<std::string> &GymUser::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "email",
        "hashed_password"
    };
    return inCols;
}

void GymUser::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getEmail())
        {
            binder << getValueOfEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getHashedPassword())
        {
            binder << getValueOfHashedPassword();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> GymUser::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    return ret;
}

void GymUser::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getEmail())
        {
            binder << getValueOfEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getHashedPassword())
        {
            binder << getValueOfHashedPassword();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value GymUser::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getEmail())
    {
        ret["email"]=getValueOfEmail();
    }
    else
    {
        ret["email"]=Json::Value();
    }
    if(getHashedPassword())
    {
        ret["hashed_password"]=getValueOfHashedPassword();
    }
    else
    {
        ret["hashed_password"]=Json::Value();
    }
    return ret;
}

std::string GymUser::toString() const
{
    return toJson().toStyledString();
}

Json::Value GymUser::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 3)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getEmail())
            {
                ret[pMasqueradingVector[1]]=getValueOfEmail();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getHashedPassword())
            {
                ret[pMasqueradingVector[2]]=getValueOfHashedPassword();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getEmail())
    {
        ret["email"]=getValueOfEmail();
    }
    else
    {
        ret["email"]=Json::Value();
    }
    if(getHashedPassword())
    {
        ret["hashed_password"]=getValueOfHashedPassword();
    }
    else
    {
        ret["hashed_password"]=Json::Value();
    }
    return ret;
}

bool GymUser::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("email"))
    {
        if(!validJsonOfField(1, "email", pJson["email"], err, true))
            return false;
    }
    else
    {
        err="The email column cannot be null";
        return false;
    }
    if(pJson.isMember("hashed_password"))
    {
        if(!validJsonOfField(2, "hashed_password", pJson["hashed_password"], err, true))
            return false;
    }
    else
    {
        err="The hashed_password column cannot be null";
        return false;
    }
    return true;
}
bool GymUser::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool GymUser::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    if(pJson.isMember("email"))
    {
        if(!validJsonOfField(1, "email", pJson["email"], err, false))
            return false;
    }
    if(pJson.isMember("hashed_password"))
    {
        if(!validJsonOfField(2, "hashed_password", pJson["hashed_password"], err, false))
            return false;
    }
    return true;
}
bool GymUser::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool GymUser::validJsonOfField(size_t index,
                               const std::string &fieldName,
                               const Json::Value &pJson,
                               std::string &err,
                               bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            else
            {
                err="The automatic primary key cannot be update";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 128)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 128)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
std::vector<UserExercise> GymUser::getExercise(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from user_exercise where user_id = $1";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *id_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<UserExercise> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(UserExercise(row));
    }
    return ret;
}

void GymUser::getExercise(const DbClientPtr &clientPtr,
                          const std::function<void(std::vector<UserExercise>)> &rcb,
                          const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from user_exercise where user_id = $1";
    *clientPtr << sql
               << *id_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<UserExercise> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(UserExercise(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
std::vector<std::pair<UserExercise,Workout>> GymUser::getWorkout_exercise(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from user_exercise,workout where workout.user_id = $1 and workout.exercise = user_exercise.id";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *id_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    std::vector<std::pair<UserExercise,Workout>> ret;
    ret.reserve(r.size());
    for (auto const &row : r)
    {
        ret.emplace_back(std::pair<UserExercise,Workout>(
            UserExercise(row),Workout(row,UserExercise::getColumnNumber())));
    }
    return ret;
}

void GymUser::getWorkout_exercise(const DbClientPtr &clientPtr,
                                  const std::function<void(std::vector<std::pair<UserExercise,Workout>>)> &rcb,
                                  const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from user_exercise,workout where workout.user_id = $1 and workout.exercise = user_exercise.id";
    *clientPtr << sql
               << *id_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<std::pair<UserExercise,Workout>> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(std::pair<UserExercise,Workout>(
                           UserExercise(row),Workout(row,UserExercise::getColumnNumber())));
                   }
                   rcb(ret);
               }
               >> ecb;
}
