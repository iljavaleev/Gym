/**
 *
 *  Load.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Load.h"
#include "Workout.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::cpp_gymdb;

const std::string Load::Cols::_id = "\"id\"";
const std::string Load::Cols::_workout = "\"workout\"";
const std::string Load::Cols::_reps = "\"reps\"";
const std::string Load::Cols::_expect = "\"expect\"";
const std::string Load::Cols::_fact = "\"fact\"";
const std::string Load::primaryKeyName = "";
const bool Load::hasPrimaryKey = false;
const std::string Load::tableName = "\"load\"";

const std::vector<typename Load::MetaData> Load::metaData_={
{"id","int32_t","integer",4,1,0,1},
{"workout","std::string","uuid",0,0,0,0},
{"reps","int32_t","integer",4,0,0,1},
{"expect","int32_t","integer",4,0,0,0},
{"fact","int32_t","integer",4,0,0,0}
};
const std::string &Load::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Load::Load(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["workout"].isNull())
        {
            workout_=std::make_shared<std::string>(r["workout"].as<std::string>());
        }
        if(!r["reps"].isNull())
        {
            reps_=std::make_shared<int32_t>(r["reps"].as<int32_t>());
        }
        if(!r["expect"].isNull())
        {
            expect_=std::make_shared<int32_t>(r["expect"].as<int32_t>());
        }
        if(!r["fact"].isNull())
        {
            fact_=std::make_shared<int32_t>(r["fact"].as<int32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 5 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            workout_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            reps_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            expect_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            fact_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
    }

}

Load::Load(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            workout_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            reps_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            expect_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            fact_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
}

Load::Load(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("workout"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["workout"].isNull())
        {
            workout_=std::make_shared<std::string>(pJson["workout"].asString());
        }
    }
    if(pJson.isMember("reps"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["reps"].isNull())
        {
            reps_=std::make_shared<int32_t>((int32_t)pJson["reps"].asInt64());
        }
    }
    if(pJson.isMember("expect"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["expect"].isNull())
        {
            expect_=std::make_shared<int32_t>((int32_t)pJson["expect"].asInt64());
        }
    }
    if(pJson.isMember("fact"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["fact"].isNull())
        {
            fact_=std::make_shared<int32_t>((int32_t)pJson["fact"].asInt64());
        }
    }
}

void Load::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            workout_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            reps_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            expect_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            fact_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[4]].asInt64());
        }
    }
}

void Load::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("workout"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["workout"].isNull())
        {
            workout_=std::make_shared<std::string>(pJson["workout"].asString());
        }
    }
    if(pJson.isMember("reps"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["reps"].isNull())
        {
            reps_=std::make_shared<int32_t>((int32_t)pJson["reps"].asInt64());
        }
    }
    if(pJson.isMember("expect"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["expect"].isNull())
        {
            expect_=std::make_shared<int32_t>((int32_t)pJson["expect"].asInt64());
        }
    }
    if(pJson.isMember("fact"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["fact"].isNull())
        {
            fact_=std::make_shared<int32_t>((int32_t)pJson["fact"].asInt64());
        }
    }
}

const int32_t &Load::getValueOfId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Load::getId() const noexcept
{
    return id_;
}
void Load::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}

const std::string &Load::getValueOfWorkout() const noexcept
{
    static const std::string defaultValue = std::string();
    if(workout_)
        return *workout_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Load::getWorkout() const noexcept
{
    return workout_;
}
void Load::setWorkout(const std::string &pWorkout) noexcept
{
    workout_ = std::make_shared<std::string>(pWorkout);
    dirtyFlag_[1] = true;
}
void Load::setWorkout(std::string &&pWorkout) noexcept
{
    workout_ = std::make_shared<std::string>(std::move(pWorkout));
    dirtyFlag_[1] = true;
}
void Load::setWorkoutToNull() noexcept
{
    workout_.reset();
    dirtyFlag_[1] = true;
}

const int32_t &Load::getValueOfReps() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(reps_)
        return *reps_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Load::getReps() const noexcept
{
    return reps_;
}
void Load::setReps(const int32_t &pReps) noexcept
{
    reps_ = std::make_shared<int32_t>(pReps);
    dirtyFlag_[2] = true;
}

const int32_t &Load::getValueOfExpect() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(expect_)
        return *expect_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Load::getExpect() const noexcept
{
    return expect_;
}
void Load::setExpect(const int32_t &pExpect) noexcept
{
    expect_ = std::make_shared<int32_t>(pExpect);
    dirtyFlag_[3] = true;
}
void Load::setExpectToNull() noexcept
{
    expect_.reset();
    dirtyFlag_[3] = true;
}

const int32_t &Load::getValueOfFact() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(fact_)
        return *fact_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Load::getFact() const noexcept
{
    return fact_;
}
void Load::setFact(const int32_t &pFact) noexcept
{
    fact_ = std::make_shared<int32_t>(pFact);
    dirtyFlag_[4] = true;
}
void Load::setFactToNull() noexcept
{
    fact_.reset();
    dirtyFlag_[4] = true;
}

void Load::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Load::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "workout",
        "reps",
        "expect",
        "fact"
    };
    return inCols;
}

void Load::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getWorkout())
        {
            binder << getValueOfWorkout();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getReps())
        {
            binder << getValueOfReps();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getExpect())
        {
            binder << getValueOfExpect();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getFact())
        {
            binder << getValueOfFact();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Load::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    return ret;
}

void Load::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getWorkout())
        {
            binder << getValueOfWorkout();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getReps())
        {
            binder << getValueOfReps();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getExpect())
        {
            binder << getValueOfExpect();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getFact())
        {
            binder << getValueOfFact();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Load::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getWorkout())
    {
        ret["workout"]=getValueOfWorkout();
    }
    else
    {
        ret["workout"]=Json::Value();
    }
    if(getReps())
    {
        ret["reps"]=getValueOfReps();
    }
    else
    {
        ret["reps"]=Json::Value();
    }
    if(getExpect())
    {
        ret["expect"]=getValueOfExpect();
    }
    else
    {
        ret["expect"]=Json::Value();
    }
    if(getFact())
    {
        ret["fact"]=getValueOfFact();
    }
    else
    {
        ret["fact"]=Json::Value();
    }
    return ret;
}

std::string Load::toString() const
{
    return toJson().toStyledString();
}

Json::Value Load::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 5)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getWorkout())
            {
                ret[pMasqueradingVector[1]]=getValueOfWorkout();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getReps())
            {
                ret[pMasqueradingVector[2]]=getValueOfReps();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getExpect())
            {
                ret[pMasqueradingVector[3]]=getValueOfExpect();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getFact())
            {
                ret[pMasqueradingVector[4]]=getValueOfFact();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getWorkout())
    {
        ret["workout"]=getValueOfWorkout();
    }
    else
    {
        ret["workout"]=Json::Value();
    }
    if(getReps())
    {
        ret["reps"]=getValueOfReps();
    }
    else
    {
        ret["reps"]=Json::Value();
    }
    if(getExpect())
    {
        ret["expect"]=getValueOfExpect();
    }
    else
    {
        ret["expect"]=Json::Value();
    }
    if(getFact())
    {
        ret["fact"]=getValueOfFact();
    }
    else
    {
        ret["fact"]=Json::Value();
    }
    return ret;
}

bool Load::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("workout"))
    {
        if(!validJsonOfField(1, "workout", pJson["workout"], err, true))
            return false;
    }
    if(pJson.isMember("reps"))
    {
        if(!validJsonOfField(2, "reps", pJson["reps"], err, true))
            return false;
    }
    else
    {
        err="The reps column cannot be null";
        return false;
    }
    if(pJson.isMember("expect"))
    {
        if(!validJsonOfField(3, "expect", pJson["expect"], err, true))
            return false;
    }
    if(pJson.isMember("fact"))
    {
        if(!validJsonOfField(4, "fact", pJson["fact"], err, true))
            return false;
    }
    return true;
}
bool Load::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 5)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Load::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    if(pJson.isMember("workout"))
    {
        if(!validJsonOfField(1, "workout", pJson["workout"], err, false))
            return false;
    }
    if(pJson.isMember("reps"))
    {
        if(!validJsonOfField(2, "reps", pJson["reps"], err, false))
            return false;
    }
    if(pJson.isMember("expect"))
    {
        if(!validJsonOfField(3, "expect", pJson["expect"], err, false))
            return false;
    }
    if(pJson.isMember("fact"))
    {
        if(!validJsonOfField(4, "fact", pJson["fact"], err, false))
            return false;
    }
    return true;
}
bool Load::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector,
                                            std::string &err)
{
    if(pMasqueradingVector.size() != 5)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Load::validJsonOfField(size_t index,
                            const std::string &fieldName,
                            const Json::Value &pJson,
                            std::string &err,
                            bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            else
            {
                err="The automatic primary key cannot be update";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
Workout Load::getWorkout(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from workout where id = $1";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *workout_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    if (r.size() == 0)
    {
        throw UnexpectedRows("0 rows found");
    }
    else if (r.size() > 1)
    {
        throw UnexpectedRows("Found more than one row");
    }
    return Workout(r[0]);
}

void Load::getWorkout(const DbClientPtr &clientPtr,
                      const std::function<void(Workout)> &rcb,
                      const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from workout where id = $1";
    *clientPtr << sql
               << *workout_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Workout(r[0]));
                    }
               }
               >> ecb;
}
